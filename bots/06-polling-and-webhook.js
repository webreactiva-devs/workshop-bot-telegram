/**
 * ü§ñ Bot de Echo con Telegraf (Polling & Webhook)
 * -----------------------------------------------
 * üìå Funcionalidades:
 * - üó£Ô∏è Responde con el mismo mensaje que env√≠a el usuario (modo echo).
 * - üîÑ Detecta si est√° corriendo en modo `polling` o `webhook` y lo informa al usuario.
 * - üöÄ Soporta ejecuci√≥n en ambos modos seg√∫n la configuraci√≥n de entorno.
 *
 * ‚öôÔ∏è Notas:
 * - Si `WEBHOOK_URL` est√° definido, el bot usar√° `webhook`, escuchando en el puerto configurado.
 * - Si `WEBHOOK_URL` no est√° definido, usar√° `polling`, consultando a Telegram peri√≥dicamente.
 * - `startBot()` determina autom√°ticamente el modo de ejecuci√≥n seg√∫n las variables de entorno.
 */

import { Telegraf } from "telegraf";

const bot = new Telegraf(process.env.BOT_TOKEN);

// Manejador simple de echo
bot.on("text", (ctx) => {
  ctx.reply(ctx.message.text);
  if (process.env.WEBHOOK_URL) {
    ctx.replyWithHTML("Est√°s usando <b>webhook</b>");
  } else {
    ctx.replyWithHTML("Est√°s usando <b>polling</b>");
  }
});

// Funci√≥n para elegir el modo de ejecuci√≥n
async function startBot() {
  if (process.env.WEBHOOK_URL) {
    // Modo webhook
    const webhookUrl = `${process.env.WEBHOOK_URL}/webhook`;

    await bot.launch({
      webhook: {
        domain: process.env.WEBHOOK_URL,
        port: process.env.PORT || 3000,
      },
    });
    //await bot.telegram.setWebhook(webhookUrl);
    console.log(`ü§ñ Bot en webhook: ${webhookUrl}`);
  } else {
    // Modo polling
    await bot.launch();
    console.log("ü§ñ Bot en modo polling");
  }
}

// Manejo de cierre
async function gracefulShutdown() {
  if (process.env.WEBHOOK_URL) {
    await bot.telegram.deleteWebhook();
    console.log("üõë Webhook eliminado");
  }
  bot.stop();
  process.exit(0);
}

process.once("SIGINT", gracefulShutdown);
process.once("SIGTERM", gracefulShutdown);

// Iniciar bot
startBot().catch((err) => {
  console.error("Error al iniciar el bot:", err);
  process.exit(1);
});
